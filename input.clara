// MVP TODO
// - List/Array type (Parametric polymorphism / Generics)
// - Module system (extracting standard library into a separate file)
// - fix all warnings and ???s

::alias Any = ⊤

::alias Nothing = ⊥

::declare ::type Float = Any

::declare ::type Int = Any

::declare ::type String = Any

::declare ::methods Float {
  @[emitKind binaryOperator] @[emitName +]
  plus: Float => Float

  @[emitKind binaryOperator] @[emitName -]
  minus: Float => Float

  @[emitKind binaryOperator] @[emitName *]
  multiply: Float => Float

  @[emitKind binaryOperator] @[emitName /]
  divideBy: Float => Float
}

::declare ::methods Int {
  @[emitKind binaryOperator] @[emitName +]
  plus: Int => Int

  @[emitKind binaryOperator] @[emitName -]
  minus: Int => Int

  @[emitKind binaryOperator] @[emitName *]
  multiply: Int => Int

  @[emitKind binaryOperator] @[emitName /]
  divideBy: Int => Float
}

::declare ::methods String {
  @[emitKind instanceProperty]
  length: Int
}

::declare ::type BrowserConsole = {
  log: String => ()
}

::declare ::val console: BrowserConsole

foo = 1 .plus 2 .multiply 4_000

bar = "asd".length.plus(1)

zot = 1 .divideBy 2

console.log("Hello World!")

::type UserOrdinal = Int

::methods o: UserOrdinal {
  next = o .plus 1
}

// FIXME allow numbers (and other non letters) in names:
// r1 = 1

// uo = UserOrdinal 2

r = {
  a = 1: Int
  b = 2
}.a

::type Rect = { x: Int, y: Int }

// ::methods {x, y}: Rect {
//   area = x .* y
// }
::methods r: Rect {
  area = r.x.multiply(r.y)
}

makeRect = ::new Rect
fooRect = ::new Rect { x = 2, y = 3 }
// ::enum Option A = Some A | None

area = fooRect.area

() // TODO program should return Nothing
