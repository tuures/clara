// MVP TODO
// - List/Array type (Parametric polymorphism / Generics)
// - equality
// - (pattern matching?)
// - Module system (extracting standard library into a separate file)

// - fix all warnings and ???s

// ::alias Any = ⊤

// ::alias Nothing = ⊥

// ::declare ::type Float = Any

// ::declare ::type Int = Any

// ::declare ::type String = Any

::alias Any: ⊤

::alias Nothing: ⊥

::declare ::type Float: Any

::declare ::type Int: Any

::declare ::type String: Any

::declare ::type Boolean: Any
::declare ::val true: Boolean
::declare ::val false: Boolean

::declare ::methods Float {
  @[emitKind binaryOperator] @[emitName +]
  plus: Float => Float

  @[emitKind binaryOperator] @[emitName -]
  minus: Float => Float

  @[emitKind binaryOperator] @[emitName *]
  multiply: Float => Float

  @[emitKind binaryOperator] @[emitName /]
  divideBy: Float => Float
}

::declare ::methods Int {
  @[emitKind binaryOperator] @[emitName +]
  plus: Int => Int

  @[emitKind binaryOperator] @[emitName -]
  minus: Int => Int

  @[emitKind binaryOperator] @[emitName *]
  multiply: Int => Int

  @[emitKind binaryOperator] @[emitName /]
  divideBy: Int => Float
}

::declare ::methods String {
  @[emitKind instanceProperty]
  length: Int
}


/// -------------


// ::declare ::type BrowserConsole = {
//   log: String => ()
// }

// ::declare ::val console: BrowserConsole

// foo = 1 .plus 2 .multiply 4_000

// bar = "asd".length.plus(1)

// zot = 1 .divideBy 2

// console.log("Hello World!")

// ::type UserOrdinal = Int

// ::methods o: UserOrdinal {
//   next = o .plus 1
// }

// FIXME allow numbers (and other non letters) in names:
// r1 = 1

// uo = UserOrdinal 2

// r = {
//   a = 1: Int
//   b = 2
// }.a

// ::type Rect = { x: Int, y: Int }

// ::methods {x, y}: Rect {
//   area = x .* y
// }
// ::methods r: Rect {
//   area = r.x.multiply(r.y)
// }
// ::methods Rect = r => {

// }

// makeRect = ::new Rect
// fooRect: Rect = ::new Rect { x = 2, y = 3 }
// // ::enum Option A = Some A | None

// area = fooRect.area



::type Box<T>: { x: T }

// ::methods<T> b: Box<T> {
//   get = b.x: T
// }

// ::methods b: Box {
//   get = b.x
// }

// ::methods Box {
//   get = _.x: T
// }

// ::methods (b: Box) => {
//   get = b.x: T
//   // map<B> = (f: T => B) => Box{ x = f(b.x) }
// }

// ::methods Box @ $b {
//   get: T = b.x
//   map<B> = (f: T => B) => Box{ x = f(b.x) }
// }

// ::methods Maybe {
//   map<B>: Maybe<B> = (f: A => B) => this ??
//     | None => None
//     | Some(value) => f(value)
// }


// boxedInt = ::new Box { x = 1 }
// boxedInt.get


// ::alias Foo<T> = { foo: T }

// asd: Foo<String> = { foo = 1 } // should fail

() // TODO program should return Nothing
