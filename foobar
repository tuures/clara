::def Unit

  Unit {}
  Unit: Unit

::def Boolean {

}

::comp Boolean {
  parse = (s: String) => ::match {
    "True" => True
  }
}



::data Unit {

}

::data Boolean {

} = True {

} | False {

}

::data Maybe[A] {
  map[B]: (f: A => B) => Maybe[B]
} = Just(value: A) {
  map[B] = (f: A => B) => Just(f(value))
} | None {
  map[B] = (f: A => B) => None
}

::comp Just {
  apply[T] = (value: T) => ::new Just { value = value }
}



::data Unit

::data Boolean = True | False

::data Maybe[A] {
  map[B] = (f: A => B) => ::match {
    ::case Just(value) => Just(f(value))
    ::case None => None
  } ::this
} = Just(value: A) | None
